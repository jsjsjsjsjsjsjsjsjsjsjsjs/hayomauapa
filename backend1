import os,json
from flask import *
import subprocess, random, re,sys
try:
	import speedtest
except:
	os.system("pip3 install speedtest-cli")
std = subprocess.PIPE
app = Flask(__name__)
auth = sys.argv[2]

import math

def convert_size(size_bytes):
   if size_bytes == 0:
       return "0B"
   size_name = ("B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB")
   i = int(math.floor(math.log(size_bytes, 1024)))
   p = math.pow(1024, i)
   s = round(size_bytes / p, 2)
   return "%s %s" % (s, size_name[i])

@app.route("/backend")
def backend():
	return send_file("/usr/bin/backend")


@app.route("/sysinfo")
def sysinfo():
	if request.headers.get("AUTH_KEY") == auth:
		x = subprocess.check_output("neofetch --json",shell=True).decode("ascii")
		x = json.loads(x)
		mem = os.sysconf('SC_PAGE_SIZE') * os.sysconf('SC_PHYS_PAGES')
		mem = convert_size(mem)
		return {"ram":mem,
			"os":x["OS"],
			"uptime":x["Uptime"],
			"cpu":x["CPU"]}
	else:
		return redirect("http://xnxx.com")

@app.route("/cek")
def cek():
	if request.headers.get("AUTH_KEY") == auth:
		x = subprocess.check_output("cek",shell=True).decode("ascii")
		return x
	else:
		return redirect("http://xnxx.com")

@app.route("/vnstat")
def vnstat():
	if request.headers.get("AUTH_KEY") == auth:
		x = subprocess.check_output("vnstat -t",shell=True).decode("ascii")
		return x
	else:
		return redirect("http://xnxx.com")

@app.route("/speedtest")
def speedtest():
	if request.headers.get("AUTH_KEY") == auth:
		x = subprocess.check_output("speedtest-cli --share --simple",shell=True).decode("ascii")
		ping = re.search("Ping: (.*)", x).group(1)
		down = re.search("Download: (.*)", x).group(1)
		up = re.search("Upload: (.*)", x).group(1)
		res = re.search("Share results: (.*)", x).group(1)
		return f"{down}@{up}@{ping}@{res}"
	else:
		return redirect("http://xnxx.com")

@app.route("/adduser")
def main():
	if request.headers.get("AUTH_KEY") == auth:
		u = request.args.get("user")
		p = request.args.get("password")
		try:
			subprocess.check_output(f"useradd -M {u} && usermod --password $(echo {p} | openssl passwd -1 -stdin) {u}", shell=True)
		except:
			return "used"
		else:
			return "success"
	else:
		return redirect("http://xnxx.com")

@app.route("/trojan-create")
def create_trojan():
	if request.headers.get("AUTH_KEY") == auth:
		user = request.args.get('user')
		exp = request.args.get('exp')
		x = subprocess.Popen(["add-trstb"], stdin=subprocess.PIPE,
        	stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False)
		out, _ = x.communicate(bytes(f"{user}\n{exp}\nx\nx", "utf-8"))
		out = out.decode("utf-8")
		a = [x.group() for x in re.finditer("trojan://(.*)",out)]
		if a:
			return (a)
		else:
			return "error"
	else:
		return redirect("http://xnxx.com")
		
@app.route("/trojan-create1")
def create_trojan1():
	if request.headers.get("AUTH_KEY") == auth:
		user = request.args.get('user')
		exp = request.args.get('exp')
		x = subprocess.Popen(["add-trstb"], stdin=subprocess.PIPE,
        	stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False)
		out, _ = x.communicate(bytes(f"{user}\n{exp}\nx\nx", "utf-8"))
		out = out.decode("utf-8")
		a = [x.group() for x in re.finditer("trojan://(.*)",out)]
		if a:
			return (a)
		else:
			return "error"
	else:
		return redirect("http://xnxx.com")
		
@app.route("/trial-trojan")
def trial_trojan():
	if request.headers.get("AUTH_KEY") == auth:
		user = "trialX"+str(random.randint(10,1000))
		exp = "1"
		x = subprocess.Popen(["add-trl"], stdin=subprocess.PIPE,
        	stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False)
		out, _ = x.communicate(bytes(f"{user}\n{exp}\nx\nx", "utf-8"))
		out = out.decode("utf-8")
		a = [x.group() for x in re.finditer("trojan://(.*)",out)]
		return (a)
	else:
		return redirect("http://xnxx.com")

@app.route("/trial-vless")
def trial_vless():
	if request.headers.get("AUTH_KEY") == auth:
		user = "trialX"+str(random.randint(10,1000))
		exp = "1"
		x = subprocess.Popen(["add-vless"], stdin=subprocess.PIPE,
		stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False)
		out, _ = x.communicate(bytes(f"{user}\n{exp}\nx\nx", "utf-8"))
		out = out.decode("utf-8")
		a = [x.group() for x in re.finditer("vless://(.*)",out)]
		if a:
			return str(a)
		else:
			return "error"
	else:
		return redirect("http://xnxx.com")

@app.route("/create-vless")
def create_vless():
	if request.headers.get("AUTH_KEY") == auth:
		user = request.args.get("user")
		exp = request.args.get("exp")
		x = subprocess.Popen(["add-vless"], stdin=subprocess.PIPE,
		stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False)
		out, _ = x.communicate(bytes(f"{user}\n{exp}\nx\nx", "utf-8"))
		out = out.decode("utf-8")
		a = [x.group() for x in re.finditer("vless://(.*)",out)]
		if a:
			return str(a)
		else:
			return "error"
	else:
		return redirect("http://xnxx.com")

@app.route("/create-vmess")
def create_vmess():
	if request.headers.get("AUTH_KEY") == auth:
		user = request.args.get("user")
		exp = request.args.get("exp")
		x = subprocess.Popen(["add-wsstb"], stdin=subprocess.PIPE,
		stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False)
		out, _ = x.communicate(bytes(f"{user}\n{exp}\nx\nx", "utf-8"))
		out = out.decode("utf-8")
		a = [x.group() for x in re.finditer("vmess://(.*)",out)]
		if a:
			return str(a)
		else:
			return "error"
			
@app.route("/create-vmess1")
def create_vmess1():
	if request.headers.get("AUTH_KEY") == auth:
		user = request.args.get("user")
		exp = request.args.get("exp")
		x = subprocess.Popen(["add-wsstb"], stdin=subprocess.PIPE,
		stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False)
		out, _ = x.communicate(bytes(f"{user}\n{exp}\nx\nx", "utf-8"))
		out = out.decode("utf-8")
		a = [x.group() for x in re.finditer("vmess://(.*)",out)]
		if a:
			return str(a)
		else:
			return "error"

@app.route("/trial-vmess")
def trial_vmess():
	if request.headers.get("AUTH_KEY") == auth:
		user = "trialX"+str(random.randint(10,1000))
		exp = "1"
		x = subprocess.Popen(["add-wstr"], stdin=subprocess.PIPE,
		stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False)
		out, _ = x.communicate(bytes(f"{user}\n{exp}\nx\nx", "utf-8"))
		out = out.decode("utf-8")
		a = [x.group() for x in re.finditer("vmess://(.*)",out)]
		if a:
			return str(a)
		else:
			return "error"
		
@app.route("/trial-ssh")
def trial_ssh():
	if request.headers.get("AUTH_KEY") == auth:
		trial = subprocess.check_output("echo trial`</dev/urandom tr -dc X-Z0-9 | head -c4`", shell=True).decode("ascii")
		subprocess.check_output(f'useradd -e `date -d "1 days" +"%Y-%m-%d"` -s /bin/false -M {trial}', shell=True)
		subprocess.check_output(f'usermod --password $(echo 1 | openssl passwd -1 -stdin) {trial}', shell=True)
		return trial + ":" + "1"
	else:
		return redirect("http://xnxx.com")

@app.route("/adduser/exp")
def add_user_exp():
	if request.headers.get("AUTH_KEY") == auth:
		u = request.args.get("user")
		p = request.args.get("password")
		exp = request.args.get("exp")
		try:
			subprocess.check_output(f'useradd -e `date -d "{exp} days" +"%Y-%m-%d"` -s /bin/false -M {u}', shell=True)
			subprocess.check_output(f'usermod --password $(echo {p} | openssl passwd -1 -stdin) {u}', shell=True)
		except:
			return "error"
		else:
			return "success"
	else:
		return redirect("http://xnxx.com")

@app.route("/renew")
def renew():
	if request.headers.get("AUTH_KEY") == auth:
		u = request.args.get("user")
		p = request.args.get("password")
		exp = request.args.get("exp")
		try:
			subprocess.check_output(f'userdel -f {u}', shell=True)
		except Exception as e:
			print(str(e))
			return "error"
		else:
			subprocess.check_output(f'useradd -e `date -d "{exp} days" +"%Y-%m-%d"` -s /bin/false -M {u}', shell=True)
			subprocess.check_output(f'usermod --password $(echo {p} | openssl passwd -1 -stdin) {u}', shell=True)
			return "success"
	else:
		return redirect("http://xnxx.com")
		
@app.route("/show")
def show():
	if request.headers.get("AUTH_KEY") == auth:
		cmd = "awk -F: '($3>=1000)&&($1!='nobody'){print $1}' /etc/passwd"
		x = subprocess.check_output(cmd, shell=True).decode("ascii")
		return Response(x, mimetype="text/plain")
	else:
		return redirect("http://xnxx.com")

@app.route("/deluser")
def deluser():
	if request.headers.get("AUTH_KEY") == auth:
		u = request.args.get("user")
		try:
			subprocess.check_output(f'userdel -f {u}', shell=True)
		except:
			return "error"
		else:
			return "success"
	else:
		return redirect("http://xnxx.com")

app.run(host=sys.argv[1], port=6969)
